########### Jinja2 Macro for Proxy Servers ###############
{% macro location(name, healthcheck, healthcheck_uri) -%}
    location /{{ name }}/ {
        proxy_pass https://{{ name }}/;
        proxy_set_header Host {{ name }};

        proxy_ssl_session_reuse     on;
        proxy_ssl_protocols         TLSv1.2;
        proxy_ssl_verify            off;
        proxy_read_timeout          3600;
        proxy_connect_timeout       3600;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Accept-Encoding "";

        #DDOS Configs
        limit_req zone=ddosrequests burst=150 nodelay;
        #should only be used when under attack.
        #limit_conn ddosconnections 100;
        #set non-default response code to indicate no response and closed connection
        limit_req_status 444;

        {% if healthcheck %}
          health_check interval=2s fails=1 uri={{healthcheck_uri or "/"}};
        {% endif %}
    }
{%- endmacro %}

error_log /var/log/nginx/error.log debug;
worker_processes  auto;

events {
  worker_connections  1024;
}

daemon off;

http {

    include mime.types;
    include nginx-gz.conf;

    resolver {{ resolver.host }} valid={{ resolver.ttl }};  #use local DNS and override TTL to whatever value makes sense
    resolver_timeout 2s;
    client_max_body_size 30M;

    #DDOS Configs
    limit_req_zone $binary_remote_addr zone=ddosrequests:25m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=ddosconnections:25m;

    {% for name, service in services.iteritems() %}
    upstream {{ name }} {
        server        {{ service.server }} resolve;
        zone backend  64k;
        least_time 		last_byte;
        keepalive 		300;
    }
    {% endfor %}

    server {
        listen 80;

        {% for name, service in services.iteritems() %}
            {{ location(name, service.healthcheck, service.healthcheck_uri) }}
        {% endfor %}

        location / {
            return         301 https://$host$request_uri;
        }
    }

    server {
        listen       443 ssl http2	default_server;

        ssl_certificate      /etc/letsencrypt/live/mesos.ps.nginxlab.com-0001/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/mesos.ps.nginxlab.com-0001/privkey.pem;
        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/mesos.ps.nginxlab.com-0001/chain.pem;
        include nginx-ssl.conf;

        keepalive_timeout	3600s;
        keepalive_disable	none;
        keepalive_requests  100000;

        server_name {{ name }};
        status_zone {{ name }};

        root {{ root }};

        include default-location.conf;

			#DDOS Configs
			limit_req zone=ddosrequests burst=150 nodelay;
            #should only be used when under attack.
            #limit_conn ddosconnections 100;
            #set non-default response code to indicate no response and closed connection
            limit_req_status 444;


        {% for name, service in services.iteritems() if service.expose_external%}
            {{ location(name) }}
        {% endfor %}

        location = /status.html {
            root /usr/share/nginx/html/;
        }

        location /status {
            status;
        }
    }
}
